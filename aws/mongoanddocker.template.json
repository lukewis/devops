{
	"AWSTemplateFormatVersion": "2010-09-09",
	"Description": "Creates a linux VM with dotnet core 1.1, mongodb, and nginx",
	"Parameters": {
		"KeyName": {
			"Description": "Name of an existing EC2 KeyPair to enable SSH access to the instance",
			"Type": "AWS::EC2::KeyPair::KeyName",
			"Default": "lawisnie",
			"ConstraintDescription": "must be the name of an existing EC2 KeyPair."
		},
		"InstanceType": {
			"Description": "WebServer EC2 instance type",
			"Type": "String",
			"Default": "t2.micro",
			"AllowedValues": [
				"t1.micro",
				"t2.nano",
				"t2.micro",
				"t2.small",
				"t2.medium",
				"t2.large",
				"m1.small",
				"m1.medium",
				"m1.large"
			],
			"ConstraintDescription": "must be a valid EC2 instance type."
		},
		"SSHLocation": {
			"Description": "The IP address range that can be used to SSH to the EC2 instances",
			"Type": "String",
			"MinLength": "9",
			"MaxLength": "18",
			"Default": "74.111.174.91/32",
			"AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
			"ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
		},		
        "DbAdminUsername": {
			"Description": "Username for the admin user of the database",
			"Type": "String"					
		},
        "DbAdminPassword": {
			"Description": "Password for the admin user of the database",
			"Type": "String",
			"NoEcho": true	
		}
	},
	"Conditions": {		
	},
	"Mappings": {
		"AWSInstanceType2Arch": {
			"t1.micro": {
				"Arch": "PV64"
			},
			"t2.nano": {
				"Arch": "HVM64"
			},
			"t2.micro": {
				"Arch": "HVM64"
			},
			"t2.small": {
				"Arch": "HVM64"
			},
			"t2.medium": {
				"Arch": "HVM64"
			},
			"t2.large": {
				"Arch": "HVM64"
			},
			"m1.small": {
				"Arch": "PV64"
			},
			"m1.medium": {
				"Arch": "PV64"
			},
			"m1.large": {
				"Arch": "PV64"
			}
		},
		"AWSInstanceType2NATArch": {
			"t1.micro": {
				"Arch": "NATPV64"
			},
			"t2.nano": {
				"Arch": "NATHVM64"
			},
			"t2.micro": {
				"Arch": "NATHVM64"
			},
			"t2.small": {
				"Arch": "NATHVM64"
			},
			"t2.medium": {
				"Arch": "NATHVM64"
			},
			"t2.large": {
				"Arch": "NATHVM64"
			},
			"m1.small": {
				"Arch": "NATPV64"
			},
			"m1.medium": {
				"Arch": "NATPV64"
			},
			"m1.large": {
				"Arch": "NATPV64"
			}
		},
		"AWSRegionArch2AMI": {
			"us-east-1": {
				"PV64": "ami-2a69aa47",
				"HVM64": "ami-6869aa05",
				"HVMG2": "ami-61e27177"
			},
			"us-east-2": {
				"PV64": "NOT_SUPPORTED",
				"HVM64": "ami-f6035893",
				"HVMG2": "NOT_SUPPORTED"
			}
		}
	},
	"Resources": {		
		"EC2InstanceRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"AssumeRolePolicyDocument": {
					"Version" : "2012-10-17",
					"Statement": [ {
						"Effect": "Allow",
						"Principal": {
							"Service": [ "ec2.amazonaws.com" ]
						},
						"Action": [ "sts:AssumeRole" ]
					} ]
				},
				"Policies": [
					{
						"PolicyName": "MongoAndDockerInstancePolicy",
						"PolicyDocument": {
							"Version": "2012-10-17",
							"Statement": [
								{
									"Effect": "Allow",
									"Action": [
										"s3:Get*",
										"s3:List*"
									],
									"Resource": "*"
								}
							]
						}
					}
				]
			}
		},
		"CodeDeployRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
						"Sid": "",
						"Effect": "Allow",
						"Principal": {
							"Service": [
							"codedeploy.amazonaws.com"
							]
						},
						"Action": "sts:AssumeRole"
						}
					]
				},
				"ManagedPolicyArns": [
					"arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole"
				]				
			}
		},
		"EC2InstanceProfile": {
			"Type": "AWS::IAM::InstanceProfile",
			"Properties":{
				"Roles": [
					{ "Ref": "EC2InstanceRole" }
				]				
			}			
		},
		"SecurityGroupSSHFromHome": {
			"Type": "AWS::EC2::SecurityGroup",			
			"Properties": {								
				"GroupDescription": "Enable SSH access via port 22",
				"SecurityGroupIngress": [{
					"IpProtocol": "tcp",
					"FromPort": "22",
					"ToPort": "22",
					"CidrIp": {
						"Ref": "SSHLocation"
					}
				}]
			}
		},
		"SecurityGroupMongoFromHome": {
			"Type": "AWS::EC2::SecurityGroup",			
			"Properties": {								
				"GroupDescription": "Enable Mongo access via port 27017",
				"SecurityGroupIngress": [{
					"IpProtocol": "tcp",
					"FromPort": "27017",
					"ToPort": "27017",
					"CidrIp": {
						"Ref": "SSHLocation"
					}
				}]
			}
		},
		"SecurityGroupWebTraffic": {
			"Type": "AWS::EC2::SecurityGroup",			
			"Properties": {								
				"GroupDescription": "Enable web traffic access on ports 80 and 443",
				"SecurityGroupIngress": [
					{
						"IpProtocol": "tcp",
						"FromPort": "80",
						"ToPort": "80",
						"CidrIp": "0.0.0.0/0"
					},
					{
						"IpProtocol": "tcp",
						"FromPort": "443",
						"ToPort": "443",
						"CidrIp": "0.0.0.0/0"
					}
				]
			}
		},
		"EC2Instance": {
			"Type": "AWS::EC2::Instance",
			"Properties": {
				"InstanceType": {
					"Ref": "InstanceType"
				},
				"IamInstanceProfile": { "Ref": "EC2InstanceProfile" },
				"SecurityGroups": [
					{"Ref": "SecurityGroupSSHFromHome" },
					{"Ref": "SecurityGroupMongoFromHome" },
					{"Ref": "SecurityGroupWebTraffic" }
				],
				"KeyName": {
					"Ref": "KeyName"
				},
				"ImageId": {
					"Fn::FindInMap": [
						"AWSRegionArch2AMI",
						{
							"Ref": "AWS::Region"
						},
						{
							"Fn::FindInMap": [
								"AWSInstanceType2Arch",
								{
									"Ref": "InstanceType"
								},
								"Arch"
							]
						}
					]
				},
				"Tags": [
					{
						"Key" : "Name",
						"Value" : { "Ref": "AWS::StackName" }
					}
				],
				"UserData": {
					"Fn::Base64": {
						"Fn::Join": ["", [
                            "#!/bin/bash -xe\n",							
							"# Ignore commands that start with a space.  We use this to prevent sensitive info from showing up in bash history",
							"HISTCONTROL=ignoreboth",
							"sudo yum -y update\n",
							"sudo yum install -y git\n",	
							"mkdir -p /src/repos/\n",
							"cd /src/repos/\n",
							"sudo -u ec2-user bash << \"EOF\"\n",
							"sudo chown ec2-user /src/repos\n",
							"git clone https://github.com/lukewis/aws.git\n",							
							"# aws s3 cp s3://com.figtreesoftware.cf.scripts/mongoanddockerinit.sh /aws/scripts/mongoanddockerinit.sh\n",
							" sudo /src/repos/aws/scripts/mongoanddockerinit.sh -u ",
							{ "Ref" : "DbAdminUsername" },
							" -p ",
							{ "Ref" : "DbAdminPassword" },
							"\n",
							"EOF\n"							
						]]
					}
				}
			},
			"Metadata": {
				"AWS::CloudFormation::Designer": {
					"id": "ce8734da-c562-4243-8643-aa2da554ec0a"
				}			
			}
		},
		"MongoVolume1": {
			"Type": "AWS::EC2::Volume",
			"Properties": {
				"Size": 5,
				"AvailabilityZone": {
					"Fn::GetAtt": ["EC2Instance", "AvailabilityZone"]
				}
			}
		},
		"MongoVolumeMount1": {
			"Type": "AWS::EC2::VolumeAttachment",
			"Properties": {
				"InstanceId": {
					"Ref": "EC2Instance"
				},
				"VolumeId": {
					"Ref": "MongoVolume1"
				},
				"Device": "/dev/sdh"
			}
		},
		"CodeDeployApplication": {
			"Type" : "AWS::CodeDeploy::Application",			
			"Properties" : {				
				"ApplicationName" : { "Ref": "AWS::StackName" }
			}
		},
		"CodeDeployDeploymentGroup": {
			"Type": "AWS::CodeDeploy::DeploymentGroup",
			"Properties":{
				"ApplicationName": { "Ref": "CodeDeployApplication" },
				"DeploymentGroupName" : { "Ref": "AWS::StackName" },
				"ServiceRoleArn": {"Fn::GetAtt" : ["CodeDeployRole", "Arn"] },
				"Ec2TagFilters": [
					{
						"Key" : "Name",						
						"Value" : { "Ref": "AWS::StackName" },
						"Type": "KEY_AND_VALUE"
					}
				]
			}
		},
		"CodeDeployS3Bucket": {
			"Type" : "AWS::S3::Bucket",
			"Properties" : {	
				"BucketName": { "Ref": "AWS::StackName" }							
			}
		}		
	},
	"Outputs": {
		"InstanceId": {
			"Description": "InstanceId of the newly created EC2 instance",
			"Value": {
				"Ref": "EC2Instance"
			}
		},
		"AZ": {
			"Description": "Availability Zone of the newly created EC2 instance",
			"Value": {
				"Fn::GetAtt": [
					"EC2Instance",
					"AvailabilityZone"
				]
			}
		},
		"PublicDNS": {
			"Description": "Public DNSName of the newly created EC2 instance",
			"Value": {
				"Fn::GetAtt": [
					"EC2Instance",
					"PublicDnsName"
				]
			}
		},
		"PublicIP": {
			"Description": "Public IP address of the newly created EC2 instance",
			"Value": {
				"Fn::GetAtt": [
					"EC2Instance",
					"PublicIp"
				]
			}
		}		
	},
	"Metadata": {
		"AWS::CloudFormation::Designer": {
			"09375261-9964-43d1-9436-cfba6016e928": {
				"size": {
					"width": 60,
					"height": 60
				},
				"position": {
					"x": 60,
					"y": 90
				},
				"z": 1,
				"embeds": []
			},
			"ce8734da-c562-4243-8643-aa2da554ec0a": {
				"size": {
					"width": 60,
					"height": 60
				},
				"position": {
					"x": 180,
					"y": 90
				},
				"z": 1,
				"embeds": [],
				"ismemberof": [
					"09375261-9964-43d1-9436-cfba6016e928"
				]
			}
		}
	}
}
