AWSTemplateFormatVersion: '2010-09-09'
Description: Creates a linux VM with dotnet core 1.1, mongodb, and nginx
Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    Default: lawisnie_2017
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
    - t1.micro
    - t2.nano
    - t2.micro
    - t2.small
    - t2.medium
    - t2.large
    - m1.small
    - m1.medium
    - m1.large
    ConstraintDescription: must be a valid EC2 instance type.
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 74.111.174.91/32
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  DbAdminUsername:
    Description: Username for the admin user of the database
    Type: String
  DbAdminPassword:
    Description: Password for the admin user of the database
    Type: String
    NoEcho: true
  ConfigBucket:
    Type: String
    Description: Bucket where configuration resources live
    Default: "com-figtreesoftware-config-2017"
Conditions: {}
Mappings:
  AWSInstanceType2Arch:
    t1.micro:
      Arch: PV64
    t2.nano:
      Arch: HVM64
    t2.micro:
      Arch: HVM64
    t2.small:
      Arch: HVM64
    t2.medium:
      Arch: HVM64
    t2.large:
      Arch: HVM64
    m1.small:
      Arch: PV64
    m1.medium:
      Arch: PV64
    m1.large:
      Arch: PV64
  AWSInstanceType2NATArch:
    t1.micro:
      Arch: NATPV64
    t2.nano:
      Arch: NATHVM64
    t2.micro:
      Arch: NATHVM64
    t2.small:
      Arch: NATHVM64
    t2.medium:
      Arch: NATHVM64
    t2.large:
      Arch: NATHVM64
    m1.small:
      Arch: NATPV64
    m1.medium:
      Arch: NATPV64
    m1.large:
      Arch: NATPV64
  AWSRegionArch2AMI:
    us-east-1:
      PV64: ami-2a69aa47
      HVM64: ami-6869aa05
      HVMG2: ami-61e27177
    us-east-2:
      PV64: NOT_SUPPORTED
      HVM64: ami-f6035893
      HVMG2: NOT_SUPPORTED
Resources:
  EC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: MongoAndDockerInstancePolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - s3:Get*
            - s3:List*
            Resource: "*"
  CodeDeployRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: ''
          Effect: Allow
          Principal:
            Service:
            - codedeploy.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
      - Ref: EC2InstanceRole
  SecurityGroupSSHFromHome:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access via port 22
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp:
          Ref: SSHLocation
  SecurityGroupMongoFromHome:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable Mongo access via port 27017
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '27017'
        ToPort: '27017'
        CidrIp:
          Ref: SSHLocation
  SecurityGroupWebTraffic:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable web traffic access on ports 80 and 443
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        CidrIp: 0.0.0.0/0
  EC2Instance:
    Type: AWS::EC2::Instance
    Metadata:
      "AWS::CloudFormation::Authentication":
        S3AccessCreds:
          type: "S3"
          roleName": !Ref EC2InstanceRole				
      "AWS::CloudFormation::Init":
        config:
          files:
            "/Users/ec2-user/mongoanddockerinit.sh":
              "source": !Sub "https://${ConfigBucket}.s3.amazonaws.com/amazonlinux/mongoanddockerinit.sh"
              "mode": "000400"
              "owner": "ec2-user"
              "group": "ec2-user"
              "authentication": S3AccessCreds
          commands:
            01_init:
              command:  /Users/ec2-user/mongoanddockerinit.sh
    Properties:
      InstanceType:
        Ref: InstanceType
      IamInstanceProfile:
        Ref: EC2InstanceProfile
      SecurityGroups:
      - Ref: SecurityGroupSSHFromHome
      - Ref: SecurityGroupMongoFromHome
      - Ref: SecurityGroupWebTraffic
      KeyName:
        Ref: KeyName
      ImageId:
        Fn::FindInMap:
        - AWSRegionArch2AMI
        - Ref: AWS::Region
        - Fn::FindInMap:
          - AWSInstanceType2Arch
          - Ref: InstanceType
          - Arch
      Tags:
      - Key: Name
        Value:
          Ref: AWS::StackName
      UserData:
        Fn::Base64:
          Fn::Join:
          - ''
          - - "#!/bin/bash -xe\n"
            - "yum install -y aws-cfn-bootstrap\n"
            - "# Install the files and packages from the metadata\n"
            - "/opt/aws/bin/cfn-init -v "
            - !Sub "         --stack ${AWS::StackName}"
            - "         --resource EC2Instance "            
            - !Sub "         --region ${AWS::Region}\n"
    Metadata:
      AWS::CloudFormation::Designer:
        id: ce8734da-c562-4243-8643-aa2da554ec0a
  MongoVolume1:
    Type: AWS::EC2::Volume
    Properties:
      Size: 5
      AvailabilityZone:
        Fn::GetAtt:
        - EC2Instance
        - AvailabilityZone
  MongoVolumeMount1:
    Type: AWS::EC2::VolumeAttachment
    Properties:
      InstanceId:
        Ref: EC2Instance
      VolumeId:
        Ref: MongoVolume1
      Device: "/dev/sdh"  
  CodeDeployS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Ref: AWS::StackName
Outputs:
  InstanceId:
    Description: InstanceId of the newly created EC2 instance
    Value:
      Ref: EC2Instance
  AZ:
    Description: Availability Zone of the newly created EC2 instance
    Value:
      Fn::GetAtt:
      - EC2Instance
      - AvailabilityZone
  PublicDNS:
    Description: Public DNSName of the newly created EC2 instance
    Value:
      Fn::GetAtt:
      - EC2Instance
      - PublicDnsName
  PublicIP:
    Description: Public IP address of the newly created EC2 instance
    Value:
      Fn::GetAtt:
      - EC2Instance
      - PublicIp
